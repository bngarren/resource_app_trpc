version: '3.8'
services:
  app_staging:
    container_name: app_staging
    build:
      context: .
      target: staging
    entrypoint: ["/bin/bash", "./docker-staging/entrypoint.staging.docker.sh"]
    ports:
    # This setting actually makes the application accessible from outside the Docker container
    # <host>:<container> 
    # thus <container> needs to match the port that our node process is listening on (from .env file)
      - "2024:2024"
    depends_on:
      db_staging:
        condition: service_healthy
    env_file:
      - .env.common
      - .env.staging
    networks:
      - internal_network
    volumes:
      - ./logs:/app/logs # Map the logs directory
  app_testing:
    container_name: app_testing
    build:
      context: .
      target: testing
    entrypoint: ["/bin/bash", "./docker-testing/entrypoint.testing.docker.sh"]
    ports:
      - "2025:2025"
      - "9229:9229" #expose the debug port to the outside world
    depends_on:
      db_testing:
        condition: service_healthy
    env_file:
      - .env.common
      - .env.test
    networks:
      - internal_network
      - elk
    volumes:
      - ./tests:/app/tests:ro #Allow container to read from host's ./tests/
      - ./src:/app/src:ro #Allow container to read from host's ./src/
      - ./logs:/app/logs # Map the logs directory
  db_staging:
    container_name: db_staging
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stagingdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - 5434:5432
    networks:
      - internal_network
    volumes:
      - dbdata_staging:/var/lib/postgresql/data
  db_testing:
    container_name: db_testing
    image: postgres:14
    command: postgres -c log_min_messages=info -c log_statement=all
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - internal_network
    ports:
      - 5435:5432
    volumes:
      - dbdata_testing:/var/lib/postgresql/data
  filebeat:
    container_name: filebeat
    build:
      context: ./docker-filebeat
      args:
        FILEBEAT_VERSION: 8.10.4 # Can pull from env variable in the future
    env_file: # only passes to the container, not the docker compose file
      - .env.common
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - LOG_PATH=/app/logs/
    volumes:
      - ./logs:/app/logs:ro # Map the logs directory
      - ./docker-filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
    networks:
      - elk

volumes:
  dbdata_staging:
  dbdata_testing:
networks:
      elk:
        name: docker-elk_elk
        external: true
      internal_network:
        driver: bridge
          
