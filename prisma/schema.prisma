// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  // from project root .env file
  url = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  firebase_uid       String              @unique
  email              String              @unique
  username           String?
  UserInventoryItems UserInventoryItem[]
  Harvesters         Harvester[]
}

model SpawnRegion {
  id               String            @id @default(uuid())
  h3Index          String            @unique @map("h3_index")
  h3Resolution     Int               @map("h3_resolution")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  resetDate        DateTime?         @map("reset_date")
  SpawnedResources SpawnedResource[]
}

enum ResourceType {
  REGULAR
  ARCANE_ELEMENT
  ARCANE_ENERGY
}

enum ResourceRarityLevel {
  VERY_COMMON
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model ResourceRarity {
  level         ResourceRarityLevel @id @default(VERY_COMMON)
  name       String
  likelihood Int                 @unique @default(1) // Should be 1-6
  Resource   Resource[]
}

model Resource {
  id                  String              @id @default(uuid())
  url                 String              @unique
  name                String
  metadata            Json                @default("{}")
  resourceType        ResourceType        @map("resource_type")
  resourceRarity      ResourceRarity      @relation(fields: [resourceRarityLevel], references: [level])
  resourceRarityLevel ResourceRarityLevel
  SpawnedResources    SpawnedResource[]
}

model SpawnedResource {
  resource      Resource    @relation(fields: [resourceId], references: [id])
  resourceId    String      @map("resource_id")
  spawnRegion   SpawnRegion @relation(fields: [spawnRegionId], references: [id])
  spawnRegionId String      @map("spawn_region_id")
  h3Index       String      @unique @map("h3_index")
  h3Resolution  Int         @map("h3_resolution")

  // Defines a composite primary key
  // Each SpawnedResource is uniquely defined by an h3Index and spawnRegionId
  // Thus, you can't have an h3Index used by more than one SpawnedResource per region
  @@id([h3Index, spawnRegionId])
}

enum ItemType {
  RESOURCE
  COMPONENT
  HARVESTER
}

model UserInventoryItem {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @map("user_id")
  itemId   String   @map("item_id")
  itemType ItemType @map("item_type")
  quantity Int

  @@unique([userId, itemId]) // only 1 UserInventoryItem for a given user and itemId combo
  // i.e., a user should not have 2 records in UserInventoryItem table for the same item
}

model Harvester {
  id              String    @id @default(uuid())
  name            String
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @map("user_id")
  deployedDate    DateTime? @map("deployed_date")
  metadata        Json      @default("{}") // includes energy efficiency, extraction rate, inventory max size, etc.
  h3Index         String?   @map("h3_index") // deployment location. Should be size/resolution of harvest region. If null, not deployed
  initialEnergy   Int?      @map("initial_energy") // starting energy level
  energyStartTime DateTime? @map("energy_start_time") // start time of initial energy usage
  energyEndTime   DateTime? @map("energy_end_time") // expected end time for energy

  @@unique([id, userId]) // only 1 user per harvester
}
